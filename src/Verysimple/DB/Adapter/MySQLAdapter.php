<?php
namespace Verysimple\DB\Adapter;

use Verysimple\DB\Adapter\IDBAdapter;

/**
 * @author jason
 */
class MySQLAdapter implements IDBAdapter {
	
	/**
	 * {@inheritDoc}
	 * @see \Verysimple\DB\Adapter\IDBAdapter::GetTablesQuery()
	 */
	public function getTablesQuery() 
	{
		return "SELECT
			table_schema as db_name,
			table_name as table_name,
			CASE WHEN table_type = 'VIEW' THEN 1 ELSE 0 END as is_view
			FROM INFORMATION_SCHEMA.TABLES
			WHERE table_catalog = 'def'
			AND table_schema = :schema";
	}

	/**
	 * {@inheritDoc}
	 * @see \Verysimple\DB\Adapter\IDBAdapter::GetTablesQuery()
	 */
	public function getColumnsQuery() 
	{
		return "SELECT
			INFORMATION_SCHEMA.COLUMNS.TABLE_SCHEMA as db_name,
			INFORMATION_SCHEMA.COLUMNS.TABLE_NAME AS table_name,
			INFORMATION_SCHEMA.COLUMNS.COLUMN_NAME AS column_name,
			COLUMN_COMMENT AS column_comment,
			ORDINAL_POSITION AS ordinal_position,
			COLUMN_DEFAULT AS column_default,
			DATA_TYPE AS data_type,
			COLUMN_TYPE NOT LIKE '%unsigned%' AS is_signed,
			CHARACTER_MAXIMUM_LENGTH AS max_length,
			NUMERIC_PRECISION AS numeric_precision,
			NUMERIC_SCALE AS numeric_scale,
			if(DATA_TYPE='datetime',6, if(DATA_TYPE='date',0,null) ) AS datetime_precision,
			if(INNER_TBL.CONSTRAINT_TYPE='PRIMARY KEY',1,0) AS is_primary_key,
			EXTRA LIKE '%auto_increment%' as is_auto_increment,
			IS_NULLABLE = 'YES' as is_nullable
			FROM INFORMATION_SCHEMA.COLUMNS
				LEFT JOIN (
				SELECT INFORMATION_SCHEMA.KEY_COLUMN_USAGE.TABLE_NAME,
					INFORMATION_SCHEMA.KEY_COLUMN_USAGE.COLUMN_NAME,
					INFORMATION_SCHEMA.KEY_COLUMN_USAGE.CONSTRAINT_SCHEMA,
					INFORMATION_SCHEMA.TABLE_CONSTRAINTS.CONSTRAINT_TYPE 
				FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE
				INNER JOIN INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
					ON INFORMATION_SCHEMA.KEY_COLUMN_USAGE.CONSTRAINT_NAME = INFORMATION_SCHEMA.TABLE_CONSTRAINTS.CONSTRAINT_NAME
					AND INFORMATION_SCHEMA.KEY_COLUMN_USAGE.CONSTRAINT_SCHEMA = INFORMATION_SCHEMA.TABLE_CONSTRAINTS.TABLE_SCHEMA
					AND INFORMATION_SCHEMA.KEY_COLUMN_USAGE.TABLE_NAME = INFORMATION_SCHEMA.TABLE_CONSTRAINTS.TABLE_NAME
					AND INFORMATION_SCHEMA.TABLE_CONSTRAINTS.CONSTRAINT_TYPE = 'PRIMARY KEY'
				) AS INNER_TBL
				ON INFORMATION_SCHEMA.COLUMNS.COLUMN_NAME = INNER_TBL.COLUMN_NAME
				AND INFORMATION_SCHEMA.COLUMNS.TABLE_NAME = INNER_TBL.TABLE_NAME
				AND INFORMATION_SCHEMA.COLUMNS.TABLE_SCHEMA = INNER_TBL.CONSTRAINT_SCHEMA
			WHERE INFORMATION_SCHEMA.COLUMNS.TABLE_SCHEMA = :schema
			AND INFORMATION_SCHEMA.COLUMNS.TABLE_NAME = :table";
	}

	/**
	 * {@inheritDoc}
	 * @see \Verysimple\DB\Adapter\IDBAdapter::GetTablesQuery()
	 */
	public function getRelationshipsQuery() 
	{
		return "SELECT
			INFORMATION_SCHEMA.TABLE_CONSTRAINTS.TABLE_SCHEMA as db_name,
			INFORMATION_SCHEMA.KEY_COLUMN_USAGE.TABLE_NAME AS table_name,
			INFORMATION_SCHEMA.KEY_COLUMN_USAGE.COLUMN_NAME AS column_name,
			INFORMATION_SCHEMA.TABLE_CONSTRAINTS.CONSTRAINT_NAME as constraint_name,
			INFORMATION_SCHEMA.KEY_COLUMN_USAGE.REFERENCED_TABLE_NAME as referenced_table_name,
			INFORMATION_SCHEMA.KEY_COLUMN_USAGE.referenced_column_name as referenced_column_name
			FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS 
			INNER JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE 
				ON INFORMATION_SCHEMA.TABLE_CONSTRAINTS.CONSTRAINT_NAME = INFORMATION_SCHEMA.KEY_COLUMN_USAGE.CONSTRAINT_NAME
				AND INFORMATION_SCHEMA.KEY_COLUMN_USAGE.TABLE_SCHEMA = INFORMATION_SCHEMA.KEY_COLUMN_USAGE.TABLE_SCHEMA
			WHERE INFORMATION_SCHEMA.TABLE_CONSTRAINTS.TABLE_SCHEMA = :schema
			AND INFORMATION_SCHEMA.TABLE_CONSTRAINTS.TABLE_NAME = :table
			AND INFORMATION_SCHEMA.TABLE_CONSTRAINTS.CONSTRAINT_TYPE = 'FOREIGN KEY';";
	}
	
}